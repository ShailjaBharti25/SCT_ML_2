# -*- coding: utf-8 -*-
"""SCT_ML_2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Uqi1MkjhWps8DyRfUeKHhhUfw-YAKr5b
"""

from google.colab import drive

# Mount to the root directory of your Google Drive
drive.mount('/content/drive')

from google.colab import drive
drive.mount('/content/drive')

import os
Root = "/content/drive/MyDrive" # Change Root to the directory
os.chdir(Root)

# If you want to work with the file, you don't need to change the directory.
# You can access it directly using its path.

# Import necessary libraries
import pandas as pd
from sklearn.cluster import KMeans
from sklearn.preprocessing import StandardScaler
import matplotlib.pyplot as plt
from sklearn.metrics import silhouette_score

# Load the dataset
data = {
    'CustomerID': [i for i in range(1, 201)],
    'Gender': ['Male' if i % 2 == 0 else 'Female' for i in range(1, 201)],
    'Age': [i % 100 for i in range(1, 201)],
    'Annual Income (k$)': [i % 100 for i in range(1, 201)],
    'Spending Score (1-100)': [i % 100 for i in range(1, 201)]
}

df = pd.DataFrame(data)

# Select relevant features for clustering
features = df[['Age', 'Annual Income (k$)', 'Spending Score (1-100)']]

# Scale the features using StandardScaler
scaler = StandardScaler()
features_scaled = scaler.fit_transform(features)

# Determine the optimal number of clusters using the Silhouette Coefficient
silhouette_coefficients = []
for n_clusters in range(2, 11):
    kmeans = KMeans(n_clusters=n_clusters)
    labels = kmeans.fit_predict(features_scaled)
    score = silhouette_score(features_scaled, labels)
    silhouette_coefficients.append(score)

# Move plotting outside the loop
plt.plot(range(2, 11), silhouette_coefficients) # Now silhouette_coefficients contains values for all cluster numbers
plt.title('Silhouette Coefficient for Different Number of Clusters')
plt.xlabel('Number of Clusters')
plt.ylabel('Silhouette Coefficient')
plt.show()

# Choose the optimal number of clusters based on the plot
n_clusters = 5

# Perform K-Means clustering
kmeans = KMeans(n_clusters=n_clusters)
labels = kmeans.fit_predict(features_scaled)

# Add the cluster labels to the original dataframe
df['Cluster'] = labels

# Print the first few rows of the dataframe
print(df.head())

# Visualize the clusters using a scatter plot
plt.scatter(features_scaled[:, 0], features_scaled[:, 1], c=labels)
plt.title('K-Means Clustering')
plt.xlabel('Age')
plt.ylabel('Annual Income (k$)')
plt.show()